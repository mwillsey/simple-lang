use std::str::FromStr;
use crate::syntax::ast::*;

grammar;

pub Name: Name = {
    // [[:word:]] = word characters ([0-9A-Za-z_])
    r"[[:alpha:]][[:word:]]*" => <>.into(),
}

pub Int: i32 = {
    r"0|-?[1-9][0-9]*" => i32::from_str(<>).unwrap()
}

pub Float: f64 = {
    r"(0|-?[1-9][0-9]*)\.[0-9]+" => f64::from_str(<>).unwrap()
}

pub Literal: Literal = {
    Int => Literal::Int(<>.into()),
    Float => Literal::Float(<>.into()),
}

// Expressions

pub Expr: RcExpr = {
    "|" <params:Comma<Pattern>> "|" <body: Expr> => Expr::Lambda{<>}.into(),
    Expr1,
}

Expr1: RcExpr = {
    <e1:Expr1> <bop:Bop1> <e2:Expr2> => Expr::Bop {<>}.into(),
    Expr2,
}

Bop1: Bop = {
    "+" => Bop::Add,
    "-" => Bop::Sub,
}

Expr2: RcExpr = {
    <e1:Expr2> <bop:Bop2> <e2:Expr3> => Expr::Bop {<>}.into(),
    Expr3,
}

Bop2: Bop = {
    "*" => Bop::Mul,
    "/" => Bop::Div,
}

Expr3: RcExpr = {
    // tokenizer aggressively considers unit a token.
    <func:Expr3> "()" => Expr::Call {
        func,
        args: Vec::new(),
    }.into(),
    <func:Expr3> "(" <args:Comma<Expr>> ")" => Expr::Call{<>}.into(),
    <ExprN>
}

ExprN: RcExpr = {
    "(" <Expr> ")",
    Name => Expr::Var(<>).into(),
    Literal => Expr::Literal(<>).into(),
    Tuple<Expr> => Expr::Tuple(<>).into(),
    <Block> => Expr::Block(<>).into(),
}

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Tuple<T>: Vec<T> = {
    // empty tuple
    "(" ")" => vec![],
    // one or more, but "(x)" is not allowed, but use "(x,")
    "(" <v:(<T> ",")+> <e:T?> ")" => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

// other stuff


pub Type: RcType = {
    "(" <Type> ")",
    Tuple<Type> => Type::Tuple(<>).into(),
    "Int" => Type::Int.into(),
    "Float" => Type::Float.into(),
    "Fn" "(" <args:Comma<Type>> ")" <ret:("->" <Type>)?> => {
        let ret = ret.unwrap_or_else(|| Type::Tuple(vec![]).into());
        Type::Fn(args, ret).into()
    },
    // <Name> => Type::Variable(<>),
}

pub Pattern: RcPattern = {
    "(" <Pattern> ")",
    "_" => Pattern::Wildcard.into(),
    Name => Pattern::Binder(<>).into(),
    Literal => Pattern::Literal(<>).into(),
    <Pattern> ":" <Type> => Pattern::Annotated(<>).into(),
    Tuple<Pattern> => Pattern::Tuple(<>).into(),
}

pub Stmt: Stmt = {
    "let" <pat:Pattern> "=" <expr:Expr> ";" => Stmt::Let {<>},
    // <Decl> => Stmt::Decl(<>),
}

// pub Decl: Decl = {
//     "fn" <name: Variable> "(" <bindings:Comma<Binding>> ")" <ret:("->" <Type>)?>
//         "{" <body:Block> "}" => {
//             Decl::Function(Function {
//                 name,
//                 bindings,
//                 body,
//                 ret: ret.unwrap_or(Type::Unit),
//             })
//     }
// }

pub Block: Block = {
    "{" <stmts:Stmt*> <expr:Expr?> "}" => {
        let expr = match expr {
            Some(e) => e,
            None => Expr::Tuple(vec![]).into()
        };
        Block {stmts, expr}
    }
}
